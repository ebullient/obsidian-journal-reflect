import { describe, it, expect } from "vitest";
import { filterCallouts } from "../src/journal-Utils";

describe("filterCallouts", () => {
    it("should return content unchanged when no callout types specified", () => {
        const content = "> [!ai] AI Response\n> This is AI text";
        const result = filterCallouts(content, "");
        expect(result).toBe(content);
    });

    it("should filter out simple callout", () => {
        const content = `Some text
> [!ai] AI Response
> This is AI text
> More AI text
Regular text after`;

        const result = filterCallouts(content, "ai");
        expect(result).toBe(`Some text
Regular text after`);
    });

    it("should filter out multiple callout types", () => {
        const content = `Text
> [!ai] AI Response
> AI text
> [!magic] Magic
> Magic text
Keep this`;

        const result = filterCallouts(content, "ai\nmagic");
        expect(result).toBe(`Text
Keep this`);
    });

    it("should handle nested callouts - filter inner callout", () => {
        const content = `> [!quote] Outer
> Regular quote text
>> [!ai] Inner AI
>> This should be filtered
> Back to quote
Normal text`;

        const result = filterCallouts(content, "ai");
        expect(result).toBe(`> [!quote] Outer
> Regular quote text
> Back to quote
Normal text`);
    });

    it("should handle nested callouts - filter outer callout", () => {
        const content = `> [!ai] Outer AI
> AI text
>> [!note] Inner note
>> Note text
> More AI text
Normal text`;

        const result = filterCallouts(content, "ai");
        expect(result).toBe(`Normal text`);
    });

    it("should handle triple nested callouts", () => {
        const content = `>> [!quote] Level 2
>> Quote text
>>> [!ai] Level 3 AI
>>> AI text at level 3
>> Back to level 2
Normal text`;

        const result = filterCallouts(content, "ai");
        expect(result).toBe(`>> [!quote] Level 2
>> Quote text
>> Back to level 2
Normal text`);
    });

    it("should be case insensitive", () => {
        const content = `> [!AI] AI Response
> Text
> [!Magic] Magic
> More text`;

        const result = filterCallouts(content, "ai\nmagic");
        expect(result).toBe("");
    });

    it("should keep callouts not in exclude list", () => {
        const content = `> [!note] Keep this
> Note text
> [!ai] Remove this
> AI text
> [!warning] Keep this too
> Warning text`;

        const result = filterCallouts(content, "ai");
        expect(result).toBe(`> [!note] Keep this
> Note text
> [!warning] Keep this too
> Warning text`);
    });

    it("should handle empty lines in callouts", () => {
        const content = `> [!ai] AI Response
> Line 1
>
> Line 3 after empty
Regular text`;

        const result = filterCallouts(content, "ai");
        expect(result).toBe(`Regular text`);
    });

    it("should handle callout immediately followed by different depth", () => {
        const content = `>> [!ai] Nested AI
>> AI text
> Different depth - should stop filtering
Normal text`;

        const result = filterCallouts(content, "ai");
        expect(result).toBe(`> Different depth - should stop filtering
Normal text`);
    });

    it("should handle multiple consecutive excluded callouts at same level", () => {
        const content = `> [!ai] First AI
> AI text
> [!ai] Second AI
> More AI text
Normal text`;

        const result = filterCallouts(content, "ai");
        expect(result).toBe(`Normal text`);
    });

    it("should handle real-world embedded file scenario", () => {
        const content = `My journal entry
> [!quote] Embedded note
> Some context from embedded file
>> [!ai] AI response in embedded
>> This was generated by AI
>> Should be filtered out
> Back to embedded content
> [!magic] Affirmation
> You are doing great
Regular journal text`;

        const result = filterCallouts(content, "ai\nmagic");
        expect(result).toBe(`My journal entry
> [!quote] Embedded note
> Some context from embedded file
> Back to embedded content
Regular journal text`);
    });

    it("should handle whitespace variations in quote prefix", () => {
        const content = `> [!ai] AI
>Text without space
> Text with space
>>Nested without space
Regular`;

        const result = filterCallouts(content, "ai");
        expect(result).toBe(`Regular`);
    });
});
